substitutions:
  devicename: tda7492_speakers
  upper_devicename: TDA7492 speakers

esphome:
  name: $devicename
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: "ХХХХХХХ"
  password: "ХХХХХХХ"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "TDA7492 Fallback Hotspot"
    password: "ХХХХХХХ"

captive_portal:

web_server:
  port: 80
  css_url: http://192.168.15.10:8123/local/webserver-v1.min.css #не отображаются состояния из-за отсутсвия сети или доступа к сайту разработчика https://github.com/esphome/issues/issues/648
  js_url: http://192.168.15.10:8123/local/webserver-v1.min.js

# Enable Home Assistant API
api:
 
# Enable OTA Access
ota:
 
# Enable verbose logging over serial
logger:

switch:
  - platform: gpio
    name: "Колонки Radiotehnika S-30A"
    pin: GPIO12
    icon: mdi:speaker-multiple

# Общие данные по устройству
  - platform: restart
    name: ${upper_devicename} Restart

sensor:
  - platform: uptime
    id: uptime_sec
  - platform: wifi_signal
    name: ${upper_devicename} WiFi Signal
    id: wifis_signal
    update_interval: 900s

text_sensor:
  - platform: template
    name: ${upper_devicename} Uptime
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600); 
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
    icon: mdi:clock-start
    update_interval: 113s
  - platform: template
    name: ${upper_devicename} Wifi Strength
    icon: "mdi:wifi"
    lambda: |-
      if (id(wifis_signal).state > -50 ) {
        return {"Excellent"};
      } else if (id(wifis_signal).state > -60) {
        return {"Good"};
      } else if (id(wifis_signal).state > -70) {
        return {"Fair"};
      } else if (id(wifis_signal).state < -70) {
        return {"Weak"};
      } else {
        return {"None"};
      }
    update_interval: 900s
  - platform: version
    name: ${upper_devicename} Version
  - platform: template
    name: ${upper_devicename} MAC Address
    lambda: 'return {WiFi.macAddress().c_str()};'
    icon: mdi:fingerprint
    update_interval: 1d
    
